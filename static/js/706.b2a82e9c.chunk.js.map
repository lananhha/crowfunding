{"version":3,"file":"static/js/706.b2a82e9c.chunk.js","mappings":"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","sources":["components/InputComponent.js","layout/LayoutAuthentication.js","pages/SignInPage.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, { useState } from 'react'\r\n\r\nfunction InputComponent({ label, type, placeholder, name, value, onChange, errorMessage, isError, onBlur, icon, children }) {\r\n\r\n    const EyeIconOpen = <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M3 12C3 12 6.27273 5 12 5C17.7273 5 21 12 21 12C21 12 17.7273 19 12 19C6.27273 19 3 12 3 12Z\" stroke=\"#A2A2A8\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\r\n        <path d=\"M12 14C13.1046 14 14 13.1046 14 12C14 10.8954 13.1046 10 12 10C10.8954 10 10 10.8954 10 12C10 13.1046 10.8954 14 12 14Z\" stroke=\"#A2A2A8\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\r\n    </svg>\r\n\r\n    const EyeIconClose = <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M13.7345 13.855C13.5098 14.1129 13.2388 14.3198 12.9378 14.4632C12.6367 14.6067 12.3116 14.6839 11.9821 14.6901C11.6525 14.6963 11.3251 14.6315 11.0195 14.4994C10.7139 14.3674 10.4362 14.1709 10.2031 13.9216C9.97007 13.6724 9.78632 13.3755 9.66287 13.0486C9.53942 12.7217 9.47879 12.3716 9.48461 12.0192C9.49042 11.6667 9.56256 11.3191 9.69672 10.9971C9.83087 10.6751 10.0243 10.3853 10.2655 10.145M16.86 17.1975C15.4614 18.3376 13.7584 18.9693 12 19C6.27273 19 3 12 3 12C4.01773 9.97167 5.42929 8.19955 7.14 6.80252L16.86 17.1975ZM10.2818 5.21002C10.845 5.06904 11.4216 4.99857 12 5.00002C17.7273 5.00002 21 12 21 12C20.5033 12.9937 19.911 13.9292 19.2327 14.7913L10.2818 5.21002Z\" stroke=\"#A2A2A8\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\r\n        <path d=\"M3 2.5L21 21\" stroke=\"#A2A2A8\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\r\n    </svg>\r\n\r\n    const ArrowDownIcon = <svg width=\"12\" height=\"8\" viewBox=\"0 0 12 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M1 1L6 6L11 1\" stroke=\"#A2A2A8\" strokeWidth=\"2\" />\r\n    </svg>\r\n\r\n\r\n    const [openPassword, setOpenPassword] = useState(false)\r\n\r\n    const toggleEye = () => {\r\n        setOpenPassword(prev => !prev)\r\n    }\r\n\r\n    return (\r\n        <div className='mb-5 relative'>\r\n            <label className=\" inline-block text-sm text-text2 font-medium leading-[22px] mb-2\">{label}</label>\r\n            <input\r\n                type={type || (openPassword ? 'text' : 'password')}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                autoFocus={openPassword}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                className=\"w-full z-10 border rounded-[10px] border-[#F1F1F3] py-4 lg:pr-11 pr-7 pl-6 placeholder:text-text4 text-sm text-text1 font-medium outline-none input-password\"\r\n            />\r\n            {isError && <div className='text-sm text-red-500 p-2 font-medium'>{errorMessage}</div>}\r\n            {icon &&\r\n                (<div onClick={toggleEye} className='cursor-pointer'>\r\n                    {openPassword ?\r\n                        (<span className='absolute lg:right-5 lg:top-[48px] right-4 top-12'>{EyeIconOpen}</span>) :\r\n                        (<span>\r\n                            <span className='hidden lg:inline absolute lg:right-5 lg:top-[48px] right-4 top-14 '>{EyeIconClose}</span>\r\n                            <span className='lg:hidden inline absolute right-4 top-14'>{ArrowDownIcon}</span>\r\n                        </span>)}\r\n                </div>)}\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nInputComponent.propTypes = {\r\n    label: PropTypes.string,\r\n    placeholder: PropTypes.string\r\n}\r\n\r\nexport default React.memo(InputComponent);","import {Link} from 'react-router-dom'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport logo from '../assets/images/Logo.png'\r\n\r\nfunction LayoutAuthentication({children}) {\r\n    return ( \r\n        <div className='w-full h-[1080px] flex justify-center lg:bg-bg-authentic bg-lite bg-cover bg-no-repeat relative'>\r\n            <Link to='/'>\r\n                <img src={logo} alt='logo' className='absolute lg:top-10 lg:left-10 top-6 left-6'/>\r\n            </Link>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nLayoutAuthentication.propTypes = {\r\n    children: PropTypes.node.isRequired\r\n}\r\n\r\nexport default LayoutAuthentication;","import React, { useState } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport LayoutAuthentication from \"../layout/LayoutAuthentication\";\r\nimport Button from \"../components/Button\";\r\nimport InputComponent from \"../components/InputComponent\";\r\n\r\nconst SignInSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email('This field is email address')\r\n        .required('This field is required'),\r\n    password: Yup.string()\r\n        .min(8, \"Password must be 8 character \")\r\n        .max(50, 'Too Long!')\r\n        .required('This field is required'),\r\n});\r\n\r\n\r\nfunction SignInPage() {\r\n    const [showError, setShowError] = useState(true)\r\n    return (\r\n        <LayoutAuthentication>\r\n            <div className='lg:w-[556px] w-[327px] h-fit lg:py-12 lg:px-14 py-5 px-[30px] lg:mt-[153px] mt-[84px] bg-white z-[1]'>\r\n                <h3 className='lg:text-[20px] text-lg font-semibold text-center leading-[30px] lg:mb-[10px] mb-[5px] text-text1'>Welcome Back!</h3>\r\n                <p className='lg:text-[14px] text-xs leading-[18px] lg:leading-[22px] font-normal text-text3 text-center lg:mb-[30px] mb-[25px]'>\r\n                    <span>Dont have an account? {' '}</span>\r\n                    <Link to='/signUp' className='text-primary font-medium underline'>Sign up</Link>\r\n                </p>\r\n                <Button className='border border-[#F1F1F3] text-text2 mb-5'>\r\n                    <svg width=\"25\" height=\"24\" viewBox=\"0 0 25 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M22.3055 10.0415L21.5 10.0415L21.5 10L12.5 10L12.5 14L18.1515 14C17.327 16.3285 15.1115 18 12.5 18C9.1865 18 6.5 15.3135 6.5 12C6.5 8.6865 9.1865 6 12.5 6C14.0295 6 15.421 6.577 16.4805 7.5195L19.309 4.691C17.523 3.0265 15.134 2 12.5 2C6.9775 2 2.5 6.4775 2.5 12C2.5 17.5225 6.9775 22 12.5 22C18.0225 22 22.5 17.5225 22.5 12C22.5 11.3295 22.431 10.675 22.3055 10.0415Z\" fill=\"#FBC02D\" />\r\n                        <path d=\"M3.65332 7.3455L6.93882 9.755C7.82782 7.554 9.98082 6 12.5003 6C14.0298 6 15.4213 6.577 16.4808 7.5195L19.3093 4.691C17.5233 3.0265 15.1343 2 12.5003 2C8.65932 2 5.32832 4.1685 3.65332 7.3455Z\" fill=\"#E53935\" />\r\n                        <path d=\"M12.5002 22C15.0832 22 17.4302 21.0115 19.2047 19.404L16.1097 16.785C15.1057 17.5455 13.8577 18 12.5002 18C9.89916 18 7.69066 16.3415 6.85866 14.027L3.59766 16.5395C5.25266 19.778 8.61366 22 12.5002 22Z\" fill=\"#4CAF50\" />\r\n                        <path d=\"M22.3055 10.0415L22.2975 10L21.5 10L12.5 10L12.5 14L18.1515 14C17.7555 15.1185 17.036 16.083 16.108 16.7855C16.1085 16.785 16.109 16.785 16.1095 16.7845L19.2045 19.4035C18.9855 19.6025 22.5 17 22.5 12C22.5 11.3295 22.431 10.675 22.3055 10.0415Z\" fill=\"#1565C0\" />\r\n                    </svg>\r\n                    <span className='ml-2.5'>Sign in with google</span>\r\n                </Button>\r\n                <Formik\r\n                    initialValues={{\r\n                        email: '',\r\n                        password: ''\r\n                    }}\r\n                    validationSchema={SignInSchema}\r\n                    validateOnChange={false}\r\n                    onSubmit={(values, { setSubmitting, resetForm }) => {\r\n                        setTimeout(() => {\r\n                            console.log(JSON.stringify(values, null, 2));\r\n                            setSubmitting(false);\r\n                            resetForm();\r\n                        }, 5000)\r\n                    }}\r\n                >\r\n                    {({\r\n                        values,\r\n                        errors,\r\n                        touched,\r\n                        handleSubmit,\r\n                        handleBlur,\r\n                        handleChange,\r\n                    }) => {\r\n                        return (\r\n                            <form\r\n                                onSubmit={handleSubmit}\r\n                                autoComplete='off'\r\n                            >\r\n                                <InputComponent\r\n                                    type=\"text\"\r\n                                    name='email'\r\n                                    label='Email *'\r\n                                    placeholder='example@gmail.com'\r\n                                    value={values.email}\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                >\r\n                                    {touched.email && errors.email && <span className=\"text-sm text-red-500 font-medium\">{errors.email}</span>}\r\n                                </InputComponent>\r\n                                <InputComponent\r\n                                    name='password'\r\n                                    label='Password *'\r\n                                    placeholder='Enter password'\r\n                                    value={values.password}\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    icon={true}\r\n                                >\r\n                                    {errors.password && touched.password && <span className=\"text-sm text-red-500 p-2 font-medium\">{errors.password}</span>}\r\n                                </InputComponent>\r\n                                <p className=\"text-sm text-primary leading-[22px] font-medium float-right mb-5 cursor-pointer\">Forgot password</p>\r\n                                <Button type=\"submit\" className='bg-primary text-white text-base leading-[26px] font-semibold'>Sign in</Button>\r\n                            </form>)\r\n                    }}\r\n                </Formik>\r\n            </div>\r\n        </LayoutAuthentication>\r\n    );\r\n}\r\n\r\nexport default React.memo(SignInPage);"],"names":["InputComponent","label","type","placeholder","name","value","onChange","errorMessage","isError","onBlur","icon","children","EyeIconOpen","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","EyeIconClose","ArrowDownIcon","useState","openPassword","setOpenPassword","className","autoFocus","onClick","prev","React","to","src","logo","alt","SignInSchema","Yup","shape","email","required","password","min","max","SignInPage","initialValues","validationSchema","validateOnChange","onSubmit","values","setSubmitting","resetForm","setTimeout","console","log","JSON","stringify","errors","touched","handleSubmit","handleBlur","handleChange","autoComplete"],"sourceRoot":""}